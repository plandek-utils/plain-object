{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { dayjsSchema } from \"@plandek-utils/ts-parse-dayjs\";\nimport { z } from \"zod\";\n\nexport const plainObjectValuePrimitiveSchema = z.union([\n  z.undefined(),\n  z.null(),\n  z.boolean(),\n  z.number().finite(),\n  z.string(),\n  z.instanceof(Date),\n  dayjsSchema,\n]);\n\n/**\n * Union of all possible primitive values (non-array, non-nested-object) of a Plain Object field.\n *\n * That means:\n * - It can be `undefined` or `null`.\n * - It can be a boolean, number, or string.\n * - It can be a Date object.\n * - It can be a Dayjs object.\n */\nexport type PlainObjectValuePrimitive = z.infer<typeof plainObjectValuePrimitiveSchema>;\n\n/**\n * Union of all possible values of a Plain Object field.\n *\n * That means:\n * - It can be `undefined` or `null`.\n * - It can be a boolean, number, or string.\n * - It can be a Dayjs object.\n * - It can be an array of Plain Object values.\n * - It can be a Plain Object where all values are Plain Object values.\n *\n * No other types are allowed, including functions.\n */\nexport type PlainObjectValue =\n  | PlainObjectValuePrimitive\n  | PlainObjectValue[]\n  | readonly PlainObjectValue[]\n  | { [prop: string]: PlainObjectValue };\nexport const plainObjectValueSchema: z.ZodType<PlainObjectValue> = z.lazy(() =>\n  z.union([\n    plainObjectValuePrimitiveSchema,\n    z.array(plainObjectValueSchema),\n    z.array(plainObjectValueSchema).readonly(),\n    z.record(plainObjectValueSchema),\n  ]),\n);\n\n/**\n * Check if the given value is either a Plain Object or a valid value of a Plain Object field.\n *\n * That means:\n * - It can be `undefined` or `null`.\n * - It can be a boolean, number, or string.\n * - It can be a Dayjs object.\n * - It can be an array of Plain Object values.\n * - It can be a Plain Object where all values are Plain Object values.\n *\n * No other types are allowed, including functions.\n */\nexport function isPlainObjectValue(x: unknown): x is PlainObjectValue {\n  return plainObjectValueSchema.safeParse(x).success;\n}\n\nexport const plainObjectSchema = z.record(plainObjectValueSchema);\n/**\n * Object where all values are Plain Object values.\n */\nexport type PlainObject = z.infer<typeof plainObjectSchema>;\n/**\n * Union of Plain Object and an array of Plain Objects.\n */\nexport type PlainObjectOrArray = PlainObject | PlainObject[];\n\n/**\n * Checks if the given PlainObjectValue is a PlainObject.\n *\n * Since the given value is a PlainObjectValue, we just need to discard the primitive values and arrays.\n *\n * @param o\n * @returns\n */\nexport function isPlainObject(o: PlainObjectValue): o is Record<string, unknown> & PlainObject {\n  return plainObjectSchema.safeParse(o).success;\n}\n\n/**\n * Extension of PlainObjectValue that allows for a generic type to be added as a valid value.\n */\nexport type PlainObjectValueExtended<T> =\n  | PlainObjectValuePrimitive\n  | T\n  | PlainObjectValueExtended<T>[]\n  | readonly PlainObjectValueExtended<T>[]\n  | { [prop: string]: PlainObjectValueExtended<T> };\n\n/**\n * Extension of PlainObject that uses PlainObjectValueExtended to add extra possible values.\n */\nexport type PlainObjectExtended<T> = {\n  [prop: string]: PlainObjectValueExtended<T>;\n};\n\n/**\n * Returns true if the given value is a valid primitive: null, undefined, boolean, string, Dayjs, or number.\n */\nexport function isValidPrimitive(x: unknown): x is PlainObjectValuePrimitive {\n  return plainObjectValuePrimitiveSchema.safeParse(x).success;\n}\n\n/**\n * Returns true if the given value is a valid array: array where all elements are PlainObjectValues.\n */\nexport function isValidArray(x: unknown): x is PlainObjectValue[] {\n  return Array.isArray(x) && x.every(isPlainObjectValue);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAA4B;AAC5B,iBAAkB;AAEX,IAAM,kCAAkC,aAAE,MAAM;AAAA,EACrD,aAAE,UAAU;AAAA,EACZ,aAAE,KAAK;AAAA,EACP,aAAE,QAAQ;AAAA,EACV,aAAE,OAAO,EAAE,OAAO;AAAA,EAClB,aAAE,OAAO;AAAA,EACT,aAAE,WAAW,IAAI;AAAA,EACjB;AACF,CAAC;AA8BM,IAAM,yBAAsD,aAAE;AAAA,EAAK,MACxE,aAAE,MAAM;AAAA,IACN;AAAA,IACA,aAAE,MAAM,sBAAsB;AAAA,IAC9B,aAAE,MAAM,sBAAsB,EAAE,SAAS;AAAA,IACzC,aAAE,OAAO,sBAAsB;AAAA,EACjC,CAAC;AACH;AAcO,SAAS,mBAAmB,GAAmC;AACpE,SAAO,uBAAuB,UAAU,CAAC,EAAE;AAC7C;AAEO,IAAM,oBAAoB,aAAE,OAAO,sBAAsB;AAkBzD,SAAS,cAAc,GAAiE;AAC7F,SAAO,kBAAkB,UAAU,CAAC,EAAE;AACxC;AAsBO,SAAS,iBAAiB,GAA4C;AAC3E,SAAO,gCAAgC,UAAU,CAAC,EAAE;AACtD;AAKO,SAAS,aAAa,GAAqC;AAChE,SAAO,MAAM,QAAQ,CAAC,KAAK,EAAE,MAAM,kBAAkB;AACvD;","names":[]}